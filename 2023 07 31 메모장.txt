컬렉션 : 자바에서 제공하는 자료구조 모음
List, Set, Map
=> 배열보다 진화된 형태, 여러 데이터를 관리하기 위함

컬렉션의 장점 : 데이터를 더 넣으면 늘어나고 덜 넣으면 줄어든다
		add(), remove() 등의 메소드가 있기 때문에 기능 처리가 간단하다.
		(중요) 객체만 저장할 수 있다. int, char, double같은 기본자료형 X
		래퍼(Wrapper)클래스를 이용하면 가능, ( integer, Character, Double)로 객체화 변형

Wrapper 클래스 8가지 : Boolean, Character, Byte, Short, Integer, Long, Float, Double

Collection 인터페이스 : List, Set의 공통 코드를 작성한 단순한 부모 인터페이스
Java Collection : 자바의 자료구조 모음(List, Set, Map)

List(나열) : 기본적으로 배열 모양
Set(집합) : 주머니 모양의 집합(중복 데이터를 허용하지 않는다)
Map(Key, Value)
Key는 중복 불가능, Value는 중복 가능






private List<Student> studentList = new ArrayList<Student>(); // 검색(조회)에 효율적
	//private List studentList = new LinkedList<>(); // 추가, 수정, 삭제에 효율적

 List.add(Object e) : 리스트에 객체를 추가
	 * 매개변수 타입이 Object == 모든 객체 매개변수로 전달할 수 있음

제네릭스 (Generics)
 보통 제네릭
-> 컬렉션에 저장되는 객체 타입을 한가지로 제한

alt + shift + j : 메서드 설명용 주석

sc.nextLine(); // 입력 버퍼에 남아있는 잘못된 문자열 제거

List에 저장된 데이터의 개수를 얻어오는 방법 : int List.size()
-> 배열명.length 대신 사용

List가 비어있는지 확인하는 방법 : boolean List.isEmpty() -> 비어있으면 true를 반환

java.util.ArrayList : 배열 형태 List (가장 대표적인 List 자식 클래스)

향상된 for문 (for each문)
	 컬렉션, 배열의 모든 요소를 순차적으로 반복접근할 수 있는 for문
	(순차적 : 0번 인덱스부터 마지막 요소까지 인덱스를 1씩 증가)
		
[작성법]
for 컬렉션 또는 배열에서 꺼낸 한개의 요소를 저장할 변수 : 컬렉션명 또는 배열명) {}

Student List.set(int index, Student e)
		// -> List의 i번째 요소를 전달받은 e로 변경
		// -> 반환값 Student == 변경 전 Student 객체가 담겨있다.

Student List.remove(int index)
리스트에서 index번째 요소를 제거. 이 때, 제거된 요소가 반환된다.
 * List는 중간에 비어있는 인덱스가 없게 하기 위해서 remove() 동작 시 뒤쪽 요소를 한 칸씩 당겨온다.

String.toUpperCase() : 문자열을 대문자로 변경


============학생관리 프로그램============

1. 학생 정보 추가
2. 학생 전체 조회
3. 학생 정보 수정
4. 학생 정보 제거
5. 이름으로 검색(일치)
6. 이름으로 검색(포함)
0. 프로그램 종료

메뉴 번호 선택 >>

public StudentService() {
		studentList.add(new Student("홍길동", 25, "서울시 중구", 'M', 90));
		studentList.add(new Student("고영희", 23, "경기도 안산시", 'F', 100));
		studentList.add(new Student("김아지", 30, "서울시 강남구", 'M', 80));
		studentList.add(new Student("오미나", 27, "충북 청주시", 'F', 90));
		studentList.add(new Student("박주희", 24, "서울 서대문구", 'F', 70));
	}









